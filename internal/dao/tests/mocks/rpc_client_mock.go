// Code generated by MockGen. DO NOT EDIT.
// Source: ./get_account_by_hash.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc "github.com/make-software/casper-go-sdk/rpc"
	types "github.com/make-software/casper-go-sdk/types"
	keypair "github.com/make-software/casper-go-sdk/types/keypair"
)

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// GetAccountBalance mocks base method.
func (m *MockRPCClient) GetAccountBalance(ctx context.Context, stateRootHash *string, purseURef string) (rpc.StateGetBalanceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", ctx, stateRootHash, purseURef)
	ret0, _ := ret[0].(rpc.StateGetBalanceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockRPCClientMockRecorder) GetAccountBalance(ctx, stateRootHash, purseURef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockRPCClient)(nil).GetAccountBalance), ctx, stateRootHash, purseURef)
}

// GetAccountInfoByBlochHash mocks base method.
func (m *MockRPCClient) GetAccountInfoByBlochHash(ctx context.Context, blockHash string, pub keypair.PublicKey) (rpc.StateGetAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfoByBlochHash", ctx, blockHash, pub)
	ret0, _ := ret[0].(rpc.StateGetAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfoByBlochHash indicates an expected call of GetAccountInfoByBlochHash.
func (mr *MockRPCClientMockRecorder) GetAccountInfoByBlochHash(ctx, blockHash, pub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfoByBlochHash", reflect.TypeOf((*MockRPCClient)(nil).GetAccountInfoByBlochHash), ctx, blockHash, pub)
}

// GetAccountInfoByBlochHeight mocks base method.
func (m *MockRPCClient) GetAccountInfoByBlochHeight(ctx context.Context, blockHeight uint64, pub keypair.PublicKey) (rpc.StateGetAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfoByBlochHeight", ctx, blockHeight, pub)
	ret0, _ := ret[0].(rpc.StateGetAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfoByBlochHeight indicates an expected call of GetAccountInfoByBlochHeight.
func (mr *MockRPCClientMockRecorder) GetAccountInfoByBlochHeight(ctx, blockHeight, pub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfoByBlochHeight", reflect.TypeOf((*MockRPCClient)(nil).GetAccountInfoByBlochHeight), ctx, blockHeight, pub)
}

// GetAuctionInfoByHash mocks base method.
func (m *MockRPCClient) GetAuctionInfoByHash(ctx context.Context, blockHash string) (rpc.StateGetAuctionInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuctionInfoByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.StateGetAuctionInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuctionInfoByHash indicates an expected call of GetAuctionInfoByHash.
func (mr *MockRPCClientMockRecorder) GetAuctionInfoByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuctionInfoByHash", reflect.TypeOf((*MockRPCClient)(nil).GetAuctionInfoByHash), ctx, blockHash)
}

// GetAuctionInfoByHeight mocks base method.
func (m *MockRPCClient) GetAuctionInfoByHeight(ctx context.Context, height uint64) (rpc.StateGetAuctionInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuctionInfoByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.StateGetAuctionInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuctionInfoByHeight indicates an expected call of GetAuctionInfoByHeight.
func (mr *MockRPCClientMockRecorder) GetAuctionInfoByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuctionInfoByHeight", reflect.TypeOf((*MockRPCClient)(nil).GetAuctionInfoByHeight), ctx, height)
}

// GetAuctionInfoLatest mocks base method.
func (m *MockRPCClient) GetAuctionInfoLatest(ctx context.Context) (rpc.StateGetAuctionInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuctionInfoLatest", ctx)
	ret0, _ := ret[0].(rpc.StateGetAuctionInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuctionInfoLatest indicates an expected call of GetAuctionInfoLatest.
func (mr *MockRPCClientMockRecorder) GetAuctionInfoLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuctionInfoLatest", reflect.TypeOf((*MockRPCClient)(nil).GetAuctionInfoLatest), ctx)
}

// GetBlockByHash mocks base method.
func (m *MockRPCClient) GetBlockByHash(ctx context.Context, hash string) (rpc.ChainGetBlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", ctx, hash)
	ret0, _ := ret[0].(rpc.ChainGetBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockRPCClientMockRecorder) GetBlockByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockRPCClient)(nil).GetBlockByHash), ctx, hash)
}

// GetBlockByHeight mocks base method.
func (m *MockRPCClient) GetBlockByHeight(ctx context.Context, height uint64) (rpc.ChainGetBlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockRPCClientMockRecorder) GetBlockByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockRPCClient)(nil).GetBlockByHeight), ctx, height)
}

// GetBlockLatest mocks base method.
func (m *MockRPCClient) GetBlockLatest(ctx context.Context) (rpc.ChainGetBlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetBlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockLatest indicates an expected call of GetBlockLatest.
func (mr *MockRPCClientMockRecorder) GetBlockLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockLatest", reflect.TypeOf((*MockRPCClient)(nil).GetBlockLatest), ctx)
}

// GetBlockTransfersByHash mocks base method.
func (m *MockRPCClient) GetBlockTransfersByHash(ctx context.Context, blockHash string) (rpc.ChainGetBlockTransfersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransfersByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.ChainGetBlockTransfersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransfersByHash indicates an expected call of GetBlockTransfersByHash.
func (mr *MockRPCClientMockRecorder) GetBlockTransfersByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransfersByHash", reflect.TypeOf((*MockRPCClient)(nil).GetBlockTransfersByHash), ctx, blockHash)
}

// GetBlockTransfersByHeight mocks base method.
func (m *MockRPCClient) GetBlockTransfersByHeight(ctx context.Context, height uint64) (rpc.ChainGetBlockTransfersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransfersByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetBlockTransfersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransfersByHeight indicates an expected call of GetBlockTransfersByHeight.
func (mr *MockRPCClientMockRecorder) GetBlockTransfersByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransfersByHeight", reflect.TypeOf((*MockRPCClient)(nil).GetBlockTransfersByHeight), ctx, height)
}

// GetBlockTransfersLatest mocks base method.
func (m *MockRPCClient) GetBlockTransfersLatest(ctx context.Context) (rpc.ChainGetBlockTransfersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransfersLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetBlockTransfersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransfersLatest indicates an expected call of GetBlockTransfersLatest.
func (mr *MockRPCClientMockRecorder) GetBlockTransfersLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransfersLatest", reflect.TypeOf((*MockRPCClient)(nil).GetBlockTransfersLatest), ctx)
}

// GetDeploy mocks base method.
func (m *MockRPCClient) GetDeploy(ctx context.Context, hash string) (rpc.InfoGetDeployResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploy", ctx, hash)
	ret0, _ := ret[0].(rpc.InfoGetDeployResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploy indicates an expected call of GetDeploy.
func (mr *MockRPCClientMockRecorder) GetDeploy(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploy", reflect.TypeOf((*MockRPCClient)(nil).GetDeploy), ctx, hash)
}

// GetDictionaryItem mocks base method.
func (m *MockRPCClient) GetDictionaryItem(ctx context.Context, stateRootHash *string, uref, key string) (rpc.StateGetDictionaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDictionaryItem", ctx, stateRootHash, uref, key)
	ret0, _ := ret[0].(rpc.StateGetDictionaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionaryItem indicates an expected call of GetDictionaryItem.
func (mr *MockRPCClientMockRecorder) GetDictionaryItem(ctx, stateRootHash, uref, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionaryItem", reflect.TypeOf((*MockRPCClient)(nil).GetDictionaryItem), ctx, stateRootHash, uref, key)
}

// GetEraInfoByBlockHash mocks base method.
func (m *MockRPCClient) GetEraInfoByBlockHash(ctx context.Context, hash string) (rpc.ChainGetEraInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfoByBlockHash", ctx, hash)
	ret0, _ := ret[0].(rpc.ChainGetEraInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraInfoByBlockHash indicates an expected call of GetEraInfoByBlockHash.
func (mr *MockRPCClientMockRecorder) GetEraInfoByBlockHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfoByBlockHash", reflect.TypeOf((*MockRPCClient)(nil).GetEraInfoByBlockHash), ctx, hash)
}

// GetEraInfoByBlockHeight mocks base method.
func (m *MockRPCClient) GetEraInfoByBlockHeight(ctx context.Context, height uint64) (rpc.ChainGetEraInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfoByBlockHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetEraInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraInfoByBlockHeight indicates an expected call of GetEraInfoByBlockHeight.
func (mr *MockRPCClientMockRecorder) GetEraInfoByBlockHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfoByBlockHeight", reflect.TypeOf((*MockRPCClient)(nil).GetEraInfoByBlockHeight), ctx, height)
}

// GetEraInfoLatest mocks base method.
func (m *MockRPCClient) GetEraInfoLatest(ctx context.Context) (rpc.ChainGetEraInfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfoLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetEraInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraInfoLatest indicates an expected call of GetEraInfoLatest.
func (mr *MockRPCClientMockRecorder) GetEraInfoLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfoLatest", reflect.TypeOf((*MockRPCClient)(nil).GetEraInfoLatest), ctx)
}

// GetEraSummaryByHash mocks base method.
func (m *MockRPCClient) GetEraSummaryByHash(ctx context.Context, blockHash string) (rpc.ChainGetEraSummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraSummaryByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.ChainGetEraSummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraSummaryByHash indicates an expected call of GetEraSummaryByHash.
func (mr *MockRPCClientMockRecorder) GetEraSummaryByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraSummaryByHash", reflect.TypeOf((*MockRPCClient)(nil).GetEraSummaryByHash), ctx, blockHash)
}

// GetEraSummaryByHeight mocks base method.
func (m *MockRPCClient) GetEraSummaryByHeight(ctx context.Context, height uint64) (rpc.ChainGetEraSummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraSummaryByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetEraSummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraSummaryByHeight indicates an expected call of GetEraSummaryByHeight.
func (mr *MockRPCClientMockRecorder) GetEraSummaryByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraSummaryByHeight", reflect.TypeOf((*MockRPCClient)(nil).GetEraSummaryByHeight), ctx, height)
}

// GetEraSummaryLatest mocks base method.
func (m *MockRPCClient) GetEraSummaryLatest(ctx context.Context) (rpc.ChainGetEraSummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraSummaryLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetEraSummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEraSummaryLatest indicates an expected call of GetEraSummaryLatest.
func (mr *MockRPCClientMockRecorder) GetEraSummaryLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraSummaryLatest", reflect.TypeOf((*MockRPCClient)(nil).GetEraSummaryLatest), ctx)
}

// GetPeers mocks base method.
func (m *MockRPCClient) GetPeers(ctx context.Context) (rpc.InfoGetPeerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", ctx)
	ret0, _ := ret[0].(rpc.InfoGetPeerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockRPCClientMockRecorder) GetPeers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockRPCClient)(nil).GetPeers), ctx)
}

// GetStateItem mocks base method.
func (m *MockRPCClient) GetStateItem(ctx context.Context, stateRootHash *string, key string, path []string) (rpc.StateGetItemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateItem", ctx, stateRootHash, key, path)
	ret0, _ := ret[0].(rpc.StateGetItemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateItem indicates an expected call of GetStateItem.
func (mr *MockRPCClientMockRecorder) GetStateItem(ctx, stateRootHash, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateItem", reflect.TypeOf((*MockRPCClient)(nil).GetStateItem), ctx, stateRootHash, key, path)
}

// GetStateRootHashByHash mocks base method.
func (m *MockRPCClient) GetStateRootHashByHash(ctx context.Context, blockHash string) (rpc.ChainGetStateRootHashResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRootHashByHash", ctx, blockHash)
	ret0, _ := ret[0].(rpc.ChainGetStateRootHashResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateRootHashByHash indicates an expected call of GetStateRootHashByHash.
func (mr *MockRPCClientMockRecorder) GetStateRootHashByHash(ctx, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRootHashByHash", reflect.TypeOf((*MockRPCClient)(nil).GetStateRootHashByHash), ctx, blockHash)
}

// GetStateRootHashByHeight mocks base method.
func (m *MockRPCClient) GetStateRootHashByHeight(ctx context.Context, height uint64) (rpc.ChainGetStateRootHashResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRootHashByHeight", ctx, height)
	ret0, _ := ret[0].(rpc.ChainGetStateRootHashResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateRootHashByHeight indicates an expected call of GetStateRootHashByHeight.
func (mr *MockRPCClientMockRecorder) GetStateRootHashByHeight(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRootHashByHeight", reflect.TypeOf((*MockRPCClient)(nil).GetStateRootHashByHeight), ctx, height)
}

// GetStateRootHashLatest mocks base method.
func (m *MockRPCClient) GetStateRootHashLatest(ctx context.Context) (rpc.ChainGetStateRootHashResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRootHashLatest", ctx)
	ret0, _ := ret[0].(rpc.ChainGetStateRootHashResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateRootHashLatest indicates an expected call of GetStateRootHashLatest.
func (mr *MockRPCClientMockRecorder) GetStateRootHashLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRootHashLatest", reflect.TypeOf((*MockRPCClient)(nil).GetStateRootHashLatest), ctx)
}

// GetStatus mocks base method.
func (m *MockRPCClient) GetStatus(ctx context.Context) (rpc.InfoGetStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx)
	ret0, _ := ret[0].(rpc.InfoGetStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockRPCClientMockRecorder) GetStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockRPCClient)(nil).GetStatus), ctx)
}

// GetValidatorChangesInfo mocks base method.
func (m *MockRPCClient) GetValidatorChangesInfo(ctx context.Context) (rpc.InfoGetValidatorChangesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorChangesInfo", ctx)
	ret0, _ := ret[0].(rpc.InfoGetValidatorChangesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorChangesInfo indicates an expected call of GetValidatorChangesInfo.
func (mr *MockRPCClientMockRecorder) GetValidatorChangesInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorChangesInfo", reflect.TypeOf((*MockRPCClient)(nil).GetValidatorChangesInfo), ctx)
}

// PutDeploy mocks base method.
func (m *MockRPCClient) PutDeploy(ctx context.Context, deploy types.Deploy) (rpc.PutDeployResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeploy", ctx, deploy)
	ret0, _ := ret[0].(rpc.PutDeployResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeploy indicates an expected call of PutDeploy.
func (mr *MockRPCClientMockRecorder) PutDeploy(ctx, deploy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeploy", reflect.TypeOf((*MockRPCClient)(nil).PutDeploy), ctx, deploy)
}

// QueryGlobalStateByBlockHash mocks base method.
func (m *MockRPCClient) QueryGlobalStateByBlockHash(ctx context.Context, blockHash, key string, path []string) (rpc.QueryGlobalStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGlobalStateByBlockHash", ctx, blockHash, key, path)
	ret0, _ := ret[0].(rpc.QueryGlobalStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryGlobalStateByBlockHash indicates an expected call of QueryGlobalStateByBlockHash.
func (mr *MockRPCClientMockRecorder) QueryGlobalStateByBlockHash(ctx, blockHash, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGlobalStateByBlockHash", reflect.TypeOf((*MockRPCClient)(nil).QueryGlobalStateByBlockHash), ctx, blockHash, key, path)
}

// QueryGlobalStateByStateHash mocks base method.
func (m *MockRPCClient) QueryGlobalStateByStateHash(ctx context.Context, stateRootHash *string, key string, path []string) (rpc.QueryGlobalStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryGlobalStateByStateHash", ctx, stateRootHash, key, path)
	ret0, _ := ret[0].(rpc.QueryGlobalStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryGlobalStateByStateHash indicates an expected call of QueryGlobalStateByStateHash.
func (mr *MockRPCClientMockRecorder) QueryGlobalStateByStateHash(ctx, stateRootHash, key, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryGlobalStateByStateHash", reflect.TypeOf((*MockRPCClient)(nil).QueryGlobalStateByStateHash), ctx, stateRootHash, key, path)
}
